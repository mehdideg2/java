/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fr.dawan.gui;

import fr.dawan.database.StagiaireDao;
import fr.dawan.domain.Formateur;
import fr.dawan.domain.Formation;
import fr.dawan.domain.Lieu;
import fr.dawan.domain.Session;
import fr.dawan.domain.Societe;
import fr.dawan.domain.Stagiaire;
import fr.dawan.domain.enums.Domaine;
import fr.dawan.domain.enums.Genre;
import fr.dawan.domain.enums.Niveau;
import fr.dawan.domain.enums.PriseEnCharge;
import fr.dawan.domain.exceptions.LevelException;
import fr.dawan.domain.exceptions.TooManyItemsException;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author bmarron
 */
public class GestionSessionApplication extends javax.swing.JFrame {
    private static final Logger LOG= Logger.getLogger(GestionSessionApplication.class.getName());
    private MyModel stagiaireModel;
    /**
     * Creates new form GestionSessionApplication
     */
    public GestionSessionApplication() {
        initComponents();
        initData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jToolBar2 = new javax.swing.JToolBar();
        jLabel1 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        addBtn = new javax.swing.JButton();
        detailsBtn = new javax.swing.JButton();
        editBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gestion des sessions");
        setLocation(new java.awt.Point(2200, 100));
        setPreferredSize(new java.awt.Dimension(650, 500));

        jToolBar1.setRollover(true);

        jButton1.setText("jButton1");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButton1);

        jToggleButton1.setText("jToggleButton1");
        jToggleButton1.setFocusable(false);
        jToggleButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jToggleButton1);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jToolBar1.add(jComboBox1);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.PAGE_START);

        jToolBar2.setRollover(true);

        jLabel1.setText("jLabel1");
        jToolBar2.add(jLabel1);
        jToolBar2.add(jProgressBar1);

        getContentPane().add(jToolBar2, java.awt.BorderLayout.PAGE_END);

        jSplitPane1.setResizeWeight(0.5);

        jScrollPane1.setViewportView(jTree1);

        jSplitPane1.setLeftComponent(jScrollPane1);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jPanel1.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Actions"));

        jPanel3.setLayout(new java.awt.GridLayout(0, 1));

        addBtn.setText("Ajout");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });
        jPanel3.add(addBtn);

        detailsBtn.setText("DÃ©tails");
        detailsBtn.setEnabled(false);
        detailsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detailsBtnActionPerformed(evt);
            }
        });
        jPanel3.add(detailsBtn);

        editBtn.setText("Edition");
        editBtn.setEnabled(false);
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });
        jPanel3.add(editBtn);

        deleteBtn.setText("Suppression");
        deleteBtn.setEnabled(false);
        jPanel3.add(deleteBtn);

        jPanel2.add(jPanel3);

        jPanel1.add(jPanel2, java.awt.BorderLayout.EAST);

        jSplitPane1.setRightComponent(jPanel1);

        jTabbedPane1.addTab("Sessions", jSplitPane1);

        getContentPane().add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        StagiaireDialog dlg = new StagiaireDialog(this, true);
        dlg.setLocationRelativeTo(this);
        dlg.setVisible(true);
        if (dlg.getReturnStatus() == StagiaireDialog.RET_OK) {
           Stagiaire s = dlg.getStagiaire();
            try {
                stagiaireModel.getSessionCourante().inscrit(s);
                StagiaireDao dao = new StagiaireDao();
                dao.create(s);
                stagiaireModel.fireTableDataChanged();
            } catch (LevelException ex) {
                LOG.log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this
                        , ex.getMessage()
                        , "Erreur lors de l'incription"
                        , JOptionPane.WARNING_MESSAGE);
            } catch (TooManyItemsException|ClassNotFoundException|SQLException ex) {
                LOG.log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this
                        , ex.getMessage()
                        , "Erreur lors de l'incription"
                        , JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_addBtnActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new File("/home/bmarron/formations/javalyon"));
        FileNameExtensionFilter filterTXT = new FileNameExtensionFilter("Fichiers Texte", ".txt");
        FileNameExtensionFilter filterCSV = new FileNameExtensionFilter("Fichiers CSV", ".csv");
        FileNameExtensionFilter filterBIN = new FileNameExtensionFilter("Fichiers Binaires", ".bin", ".zip");
        chooser.addChoosableFileFilter(filterTXT);
        chooser.addChoosableFileFilter(filterBIN);
        chooser.addChoosableFileFilter(filterCSV);
        chooser.setFileFilter(filterTXT);
        int result = chooser.showSaveDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            FileOutputStream fos = null;
            try {
                File file = chooser.getSelectedFile();
                fos = new FileOutputStream(file);
                ObjectOutputStream oos = new ObjectOutputStream(fos);
                oos.writeObject(stagiaireModel.getSessionCourante());
            } catch (IOException ex) {
                LOG.log(Level.SEVERE, null, ex);
            } finally {
                try {
                    fos.close();
                } catch (IOException ex) {
                    LOG.log(Level.SEVERE, null, ex);
                }
            }
            
        }
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void detailsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detailsBtnActionPerformed
        
        for (int index:jTable1.getSelectedRows()) {
            StagiaireDialog dlg = new StagiaireDialog(this, false);
            Stagiaire s = stagiaireModel.getSessionCourante().getInscrits().get(index);
            dlg.setStagiaire(s);
            dlg.setEditMode(false);
            dlg.setVisible(true);
        }
        
    }//GEN-LAST:event_detailsBtnActionPerformed

    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed
        StagiaireDialog dlg = new StagiaireDialog(this, true);
        int index = jTable1.getSelectedRows()[0];
        Stagiaire s = stagiaireModel.getSessionCourante().getInscrits().get(index);
        dlg.setStagiaire(s);
        dlg.setEditMode(true);
        dlg.setVisible(true);
        if (dlg.getReturnStatus() == StagiaireDialog.RET_OK) {
            stagiaireModel.fireTableDataChanged();
        }
    }//GEN-LAST:event_editBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            LOG.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GestionSessionApplication().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JButton addBtn;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JButton detailsBtn;
    private javax.swing.JButton editBtn;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JTree jTree1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables

    private void initData() {
        try {
            Lieu salleLyon1 = new Lieu("Salle 1", 4);
            Formateur benjamin = new Formateur("MARRON", "Benjamin", Genre.MONSIEUR);
            
            Societe dawan = new Societe("DAWAN");
            benjamin.setEmployeur(dawan);
            Societe yumi = new Societe("YUMI");
            Societe mlp = new Societe("Messageries Lyonnaises de Presse");
            
            Formation java5j = new Formation("Java Initiation & Approfondissement", Niveau.Intermediaire, Domaine.Dev);
            java5j.setDuree(5);
            java5j.setPrixHT(2375);
            
            Calendar cal = Calendar.getInstance();
            cal.set(2017, Calendar.OCTOBER, 16);
            cal.set(Calendar.MONTH, Calendar.OCTOBER);
            //cal.add(Calendar.DAY_OF_MONTH, 16);
            Date dateDebut = cal.getTime();
            Session sess1 = new Session(dateDebut, salleLyon1, java5j);
            sess1.setFormateurAffecte(benjamin);
            
            Stagiaire mehdi = new Stagiaire();
            mehdi.setCivilite(Genre.MONSIEUR);
            mehdi.setPrenom("Mehdi");
            mehdi.setNom("DEGHDACHE");
            mehdi.setEmployeur(yumi);
            mehdi.setPayeur(PriseEnCharge.Employeur);
            mehdi.setNiveauProgrammation(Niveau.Intermediaire);
            
            Stagiaire adrian = new Stagiaire("BICKLE", "Adrian", Genre.MONSIEUR);
            adrian.setEmployeur(yumi);
            adrian.setPayeur(PriseEnCharge.Individuel);
            adrian.setNiveauProgrammation(Niveau.Intermediaire);
            
            // Inscrire les stagiaires Ã  la session
            sess1.inscrit(mehdi);
            sess1.inscrit(adrian);
            
            sessionDetails1.setSessionCourante(sess1);
            stagiaireModel = new MyModel(sess1);
            jTable1.setModel(stagiaireModel);
            jTable1.setAutoCreateRowSorter(true);
            jTable1.getSelectionModel()
                    .setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            jTable1.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
                @Override
                public void valueChanged(ListSelectionEvent e) {
                    if (jTable1.getSelectedRowCount() == 0) {
                        detailsBtn.setEnabled(false);
                        deleteBtn.setEnabled(false);
                        editBtn.setEnabled(false);
                    } else {
                        detailsBtn.setEnabled(true);
                        deleteBtn.setEnabled(true);
                        editBtn.setEnabled(true);
                    }
                }
            });
        } catch (LevelException ex) {
            LOG.log(Level.SEVERE, "Le niveau requis est diffÃ©rent du niveau du stagiaire", ex);
        } catch (TooManyItemsException ex) {
            LOG.log(Level.SEVERE, "La session est dÃ©ja remplie.", ex);
        }
    }
    
    class MyModel extends AbstractTableModel {

        private Session sessionCourante;

        public MyModel(Session sessionCourante) {
            this.sessionCourante = sessionCourante;
        }
        
        @Override
        public int getRowCount() {
            return getSessionCourante().getNbInscrits();
        }

        @Override
        public int getColumnCount() {
            return 4;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            Stagiaire s = sessionCourante.getInscrits().get(rowIndex);
            Object resultat=null;
            switch (columnIndex) {
                case 0 :
                    resultat = s.getCivilite();
                    break;
                case 1 :
                    resultat = s.getNom();
                    break;
                case 2 :
                    resultat = s.getPrenom();
                    break;
                case 3 :
                    resultat = s.getNiveauProgrammation();
                    break;
            }
            return resultat;
        }

        @Override
        public String getColumnName(int column) {
            switch (column) {
                case 0 :
                    return "CivilitÃ©";
                case 1 :
                    return "Nom";
                case 2 :
                    return "PrÃ©nom";
                case 3 :
                    return "Niveau";
            }       
            return null;
        }

        
        /**
         * @return the sessionCourante
         */
        public Session getSessionCourante() {
            return sessionCourante;
        }

        /**
         * @param sessionCourante the sessionCourante to set
         */
        public void setSessionCourante(Session sessionCourante) {
            this.sessionCourante = sessionCourante;
        }
    }
}
